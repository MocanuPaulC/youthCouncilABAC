@startuml
' tested userstories
'26 7
' 11 filter action points quickly find action points based on some options
'42 take part in the call for ideas
' add my idea to a call for ideas

class User implements Subscriber{
    firstName : String
    lastName : String
    email : String
    password : String
    postcode : String
    role: Role
    --
    addReaction(reaction)
    addIdea(newIdea:Idea)
}


skinparam linetype ortho


enum Role {
    GENERAL_ADMIN
    COUNCIL_ADMIN
    MODERATOR
    MEMBER
}

class YouthCouncil {
    councilName : String
    municipalityName : String
    councilLogo : String
    councilQrCode : String
    afterElection : boolean
    --
    addDefaultModuleItems(modules)
    getDisplayedModuleItems(): List<ModuleItem>
    isAfterElection(): boolean
}

abstract ModuleItem {
    title : String
    description : String
    images : List<String>
    videos : List<String>
    isEnabled: boolean
    --
    addReaction(reaction)
}

class CallForIdeas {
    --
    addIdea(:Idea)
}

class Idea {
}

class InformativePage {
    title: String
    paragraphs: List<String>
    images: List<String>
    videos: List<String>
    isEnabled: boolean
}

class ActionPoint implements Publisher{
    theme : String
    label : Label
    --
    getTheme()

}

class Annoucement {

}

class Theme {
    name : String
}

enum Label {
    NOT_INCLUDED
    INCLUDED
    IN_PROGRESS
    REALIZED
}

class NewsFeed {

}

class Reaction {
    emoji : Emoji
}

class Share {

}


enum Emoji {
    LIKE
    HEART
    ROCKET
    POOP
    SKELETON
}


ModuleItem -- ModuleItem : defaultModuleItem


CallForIdeas --|> ModuleItem
Idea --|> ModuleItem
Idea --* CallForIdeas : ideas
ActionPoint --|> ModuleItem
Annoucement --|> ModuleItem

YouthCouncil "*"--"*" User : councilMembers
YouthCouncil "*"--"*" User : blockedMembers
YouthCouncil "1"--"*" User : councilAdmins
YouthCouncil "1"--"*" InformativePage
InformativePage "*" -- "*" ModuleItem

YouthCouncil "1"--"*" ModuleItem : displayedModuleItems
YouthCouncil "1"--"*" ModuleItem : defaultModuleItems
YouthCouncil -- NewsFeed

User "1" -- "*" Idea
Idea "*"-- "0..1"ActionPoint


Theme o-- ActionPoint
Theme o-- Idea

Annoucement --* NewsFeed

ModuleItem "1" -- "*" Reaction : reactions
ModuleItem "1" -- "*" Share : shares

Share "*"--"1" User
Reaction "*"--"1" User
ModuleItemController -- UserService


' Start design class diagram
class PageVisit {
    page : String
    starttime : DateTime
    endtime : DateTime
}

interface UserRepository extends JpaRepository{
    findByEmail(email : String) : User
    getUserById(id : long) : User
}


interface ModuleItemRepository extends JpaRepository{
    findAllDefaultModuleItems(): List<ModuleItem>
    getModuleItemById(:long): ModuleItem
    saveModuleItem(:ModuleItem)
}

interface YouthCouncilRepository extends JpaRepository{
    --
    getByName(municipalityName:String): YouthCouncil
}

interface UserService{
    getAllUsers() : List<User>

}
class UserServiceImpl implements UserService{
    modelMapper : ModelMapper
}
interface ModuleItemService{
    getAllModuleItems() : List<ModuleItem>
    handleCallForIdeas(idea:String,moduleItemId:long, userId:long, theme: String)

}
class ModuleItemServiceImpl implements ModuleItemService{
    modelMapper : ModelMapper
}
interface YouthCouncilService{
    --
    getAllCouncils() : List<YouthCouncil>
    getFilteredActionPoints(municipalityName:String, theme: String, label: String)
}
class YouthCouncilServiceImpl implements YouthCouncilService{
    modelMapper : ModelMapper
}

class ModuleItemController{
    --
    answerCallForIdeas(idea:String, callForIdeaId:long, userId:long, theme: String)
}

class YouthCouncilController{
    --
    getFilteredActionPoints(municipalityName:String, theme: String, label: String)
}

interface JpaRepository<T, ID>{
    save(entity : T) : T
    delete(entity : T)
    findAll() : List<T>
    findById(id : ID) : T
}

interface Subscriber{
    update()
}

interface Publisher{
    subscribers : List<Subscriber>
    notifySubscribers()
    subscribe(s: Subscriber)
    unsubscribe(s: Subscriber)
}

UserServiceImpl -- UserRepository
ModuleItemServiceImpl -- ModuleItemRepository
YouthCouncilServiceImpl -- YouthCouncilRepository
YouthCouncilServiceImpl -- ModuleItemRepository
YouthCouncilController -- YouthCouncilService

ModuleItemServiceImpl -- UserRepository

ModuleItemController -- ModuleItemService
'ModuleItemServiceImpl -- ModuleItemRepository
'ModuleItemServiceImpl -- UserRepository

'We have a set of default modules
'When a default module is modified, the changes
'are saved as a new entry in the database

@enduml